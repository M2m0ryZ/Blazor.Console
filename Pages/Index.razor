@page "/"

<h1>Hello, world!</h1>

<div id="container">
    <pre>
    <code>
            @((MarkupString)terminal)
        </code>
    </pre>

    <EditForm OnValidSubmit="Execute" Model="command">
        <div id="input-line" class="input-line">
            <div class="prompt"></div><div>
                <p>
                    <label for="commandline">></label>
                    <InputText id="commandline" Class="cmdline" autofocus="true" @bind-Value="@command.Text" />
                </p>
            </div>
        </div>
    </EditForm>
</div>

@code {

    class TerminalCommand
    {
        public string Text { get; set; }
    }

    string terminal = string.Empty;
    string input = string.Empty;

    TerminalCommand command = new TerminalCommand();

    async Task Execute(EditContext context)
    {
        var cmd = context.Model as TerminalCommand;
        terminal += $"<p><span style='color:white;font-weight:bold'>{DateTime.Now.ToShortTimeString()} > </span><span style='color:yellow'>{cmd.Text}{Environment.NewLine}</span>";
        terminal += $"{Output(cmd.Text)}";
        terminal += $"</p>";
        command.Text = string.Empty;

    }

    string Output(string text)
    {
        string output = string.Empty;
        switch (text)
        {
            case "help":
                output += $"<p>";
                output += $"<span style='color:white'>{string.Format("{0,10}", "help")}</span>";
                output += $"<span style='color:white'>{string.Format("{0,10}", "help")}</span>";
                output += $"<span style='color:white'>{string.Format("{0,10}", "help")}</span>";
                output += $"</p>";
                break;
            default:

                output += $"<span style='color:red'>{text}: command not found.</span>";

                break;
        }

        return output;
    }

}